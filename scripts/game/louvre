#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"

##? Helpers for louvre
##?
##? Usage:
##?    louvre config

doc::maybe_help "$@"

libretro() {
   local -r core="$1"
   echo 'am start -n com.retroarch.aarch64/com.retroarch.browser.retroactivity.RetroActivityFuture -e ROM "{file.path}" -e LIBRETRO /data/data/com.retroarch.aarch64/cores/'"$core"'_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch.aarch64/files/retroarch.cfg -e QUITFOCUS --activity-clear-task --activity-clear-top --activity-no-history'
}

citra_mmj() {
   echo 'am start -n org.citra.emu/.ui.MainActivity -a android.intent.action.VIEW -e GamePath "{file.path}" --activity-clear-task --activity-clear-top --activity-no-history'
}

aether() {
   echo 'am start -n xyz.aethersx2.android/.EmulationActivity -a android.intent.action.MAIN -e bootPath "{file.documenturi}" --activity-clear-task --activity-clear-top --activity-no-history' 
}

skyline() {
   echo 'am start -n skyline.emu/emu.skyline.EmulationActivity -a android.intent.action.VIEW -d "{file.path}"'
}

dolphin() {
   echo 'am start -n org.dolphinemu.dolphinemu/.ui.main.MainActivity -a android.intent.action.VIEW --activity-clear-task --activity-clear-top --activity-no-history' # -e AutoStartFile "{file.path}" 
}

# drastic() {
#    echo 'am start -n com.dsemu.drastic/.DraSticActivity -a android.intent.action.VIEW -d "{file.path}" --activity-clear-task --activity-clear-top --activity-no-history'
# }

collection() {
   local -r platform="$1"
   local -r name="$2"
   local -r launch="$3"
   local -r extensions="$(echo "$4" | tr ',' '\n' | sed 's/^/      - /')"

   cat << EOF
  - name: ${name}
    path: ${ROMS}/${platform}
    extensions: 
${extensions}
    platform: ${platform}
    denylist: ~
    launch: $launch
EOF
}

gen_collections() {
   collection gbc "Game Boy Color" "$(libretro gambatte)" "zip,rar,7z,dmg,gb,gbc"
   collection gba "Game Boy Advance" "$(libretro mgba)" "zip,rar,7z,gb,gba,gbc"
   collection nds "Nintendo DS" "$(libretro melonds)" "zip,rar,7z,bin,dsi,nds"
   collection 3ds "Nintendo 3DS" "$(citra_mmj)" "zip,rar,7z,3ds,cia,3dsx,app,axf,cci,cxi,elf"
   collection nes "Nintendo Entertainment System" "$(libretro bnes)" "zip,rar,7z,nes"
   collection snes "Super Nintendo" "$(libretro snes9x)" "zip,rar,7z,bs,fig,sfc,smc,st,swc"
   collection psp "PSP" "$(libretro ppsspp)" "zip,rar,7z,cso,elf,iso,pbp,prx"
   collection n64 "Nintendo 64" "$(libretro mupen64plus_next)" "zip,rar,7z,bin,n64,u1,v64,z64"
   collection ps1 "Playstation" "$(libretro duckstation)" "bin,cue"
   collection ps2 "Playstation 2" "$(aether)" "bin,chd,ciso,cso,cue,dump,elf,gz,img,iso,isz,m3u,mdf,nrg"
   collection ps3 "Playstation 3" "$(libretro rpcs3)" "bin"
   collection gc "Nintendo GameCube" "$(dolphin)" "ciso,dff,dol,elf,gcm,gcz,iso,m3u,rvz,tgc,wad,wbfs"
   collection wii "Nintendo Wii" "$(dolphin)" "ciso,dff,dol,elf,gcm,gcz,iso,m3u,rvz,tgc,wad,wbfs"
   collection switch "Nintendo Switch" "$(skyline)" "iso,cia,nsp,nsz"
   # collection cps2 "CPS2" "$(libretro fbalpha2012_cps2)" "zip,rar,7z,fba"
}

gen_yaml() {
   export ROMS="${ROMS:-$(get_roms_dir)}"

   local -r collections="$(gen_collections)"
   local -r client_id="$(dot sec store get louvre/client_id)"
   local -r client_secret="$(dot sec store get louvre/client_secret)"

   cat << EOF
parallelism:
  workers: 4
igdb:
  api_base_url: "https://api.igdb.com"
  images_base_url: "https://images.igdb.com"
twitch:
  client_id: ${client_id}
  client_secret: ${client_secret}
  id_base_url: "https://id.twitch.tv"
collections:
${collections}
tracing:
  time: false
  level: louvre=info
EOF
}

main() {
   gen_yaml
}

get_roms_dir() {
   for f in "/sdcard/ROMS" "/storage/7FAF-1201/ROMs" "${HOME}/ROMs"; do
      if [ -d "$f" ]; then
         echo "$f"
         return
      fi
   done

   exit 1
}


main "$@"
