#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"

##? Simple file manager
##?
##? Usage:
##?    fm
##?    fm edit <line>
##?    fm preview <line>

# input parsing
edit=false
preview=false
case "${1:-}" in
  "edit") edit=true; line="${2:-}";;
  "preview") preview=true; line="${2:-}";;
esac

_less() {
   local readonly extension="${1:-}"
   if [ -x "$(command -v bat)" ]; then
      bat -p -l "$extension"
   else
      less -R
   fi
}

_cat() {
   local readonly path="$1"
   local readonly content="$(cat "$1")"
   local readonly extension="${path##*.}"

   case $extension in
      json) echo "$content" | jq -C . | _less;;
   esac

   if echo "$content" | tail -n +2 | grep -q sh; then
      echo -e "$content" | _less "sh" 
   fi

   echo -e "$content" | _less "$extension"
}

_ls() {
   if platform::command_exists colorls; then
      colorls -a1 --color=always | cut -c5- | tail -n +2
   else
      ls -a1 --color=always | tail -n +2
   fi 
}

# TODO: 
# --bind "ctrl-m:execute:echo "{}" | less -R"
_fzf() {
   local readonly ctrl_h="ctrl-h:execute(echo ..)+abort"
   local readonly ctrl_space="ctrl-space:abort"
   local readonly ctrl_p="ctrl-p:execute(cat {} | less -R > /dev/tty)"
   local readonly ctrl_e="ctrl-e:execute(vim {} < /dev/tty > /dev/tty)"
   local readonly bind="${ctrl_h},${ctrl_space},${ctrl_p},${ctrl_e}"

   fzf-tmux \
     --ansi \
     --cycle \
     --layout=reverse \
     --inline-info \
     --header "$(pwd)" \
     --height 20 \
     --preview "$DOT_BIN shell fm preview {}" \
     --bind "$bind"
}

_strip() {
   rev \
      | xargs \
      | cut -d' ' -f1 \
      | rev
}

_browse() {

   local readonly selection="$(_ls | _fzf)"
   local readonly name="$(echo "$selection" | _strip)"
   local readonly path="$(pwd)/${name}"

   if [[ -z "$name" ]]; then
      echo "$path"
      exit 0
   fi

   if fs::is_dir "$path"; then
      cd "$path"
      _browse
   elif fs::is_file "$path"; then
      dot os open "$path"
   fi

}

if $preview; then
  name="$(echo "$line" | _strip)"
  path="$name"
  if fs::is_dir "$path"; then
     ls "$path"
  elif fs::is_file "$path"; then
     _cat "$path"
  fi
  exit 0
fi

_browse

path="$(_browse)"
if fs::is_dir "$path"; then
  echo "$path"
else
   exit 1
fi
