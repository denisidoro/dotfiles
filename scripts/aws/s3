#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"

##? Simple file manager
##?
##? Usage:
##?    s3
##?    s3 edit <line>
##?    s3 view <line>
##?    s3 preview <line>

docs::eval_help "$@"


# ===============
# input parsing
# ===============
edit=false
view=false
preview=false
case "${1:-}" in
   edit) edit=true; line="${2:-}" ;;
   view) view=true; line="${2:-}" ;;
   preview) preview=true; line="${2:-}" ;;
esac


# ===============
# string
# ===============

str::last_word() {
   rev \
      | xargs \
      | cut -d' ' -f1 \
      | rev
}

str::resolve_dots() {
   local readonly path="$(cat)"
   
   dirs=()
   for p in $(echo "$path" | tr '/' '\n'); do
     case $p in
      .) ;;
      ..) unset 'dirs[${#dirs[@]}-1]';;
      *) dirs+=("$p");;
     esac
   done

   if s3::is_dir "$path"; then
      dirs+=("")
   fi

   echo "${dirs[@]:-}" | tr ' ' '/'
}

str::remove_double_slashes() {
   sed 's|//|/|g'
}

str::slash_hacks() {
   echo "$1" | str::remove_double_slashes | str::resolve_dots 
}

str::is_full_path() {
   grep -Eq '.+?\/.+'
}

str::only_dots() {
   grep -Eq '\.+\/?'
}

str::without_prefix() {
   echo "$1" | sed 's|s3://||'
}


# ===============
# s3
# ===============

s3::path() {
   local readonly folder="${1:-}"
   local path

   if echo "$folder" | str::only_dots; then
      path="${DOT_FM_PWD}/${folder}"
   elif echo "$folder" | str::is_full_path "$folder"; then
      path="$folder"
   elif [[ -n "$folder" ]]; then
      path="${DOT_FM_PWD}/${folder}"
   else
      path="$DOT_FM_PWD"
   fi
   
   str::slash_hacks "$path"
}

s3::ls_hiding_previous() {
   aws s3 ls "$(s3::path "${1:-}")" | awk '{print $NF}'
}

s3::ls() {
   if [[ -n $DOT_FM_PWD ]]; then
      echo "../"
   fi
   s3::ls_hiding_previous "${1:-}"
}

s3::cd() {
   export DOT_FM_PWD="$(s3::path "${1:-}")"
}

s3::is_dir() {
   test ${1: -1} = "/" && return 0 || return 1
}

s3::open() {
   local readonly path="$1"

   if s3::is_dir "$path"; then
      s3::cd "$path"
      action::browse
   fi
}


# ===============
# fzf
# ===============

fzf::bindings() {
   echo "ctrl-h:execute(echo ..)+abort"
   echo "ctrl-space:abort"
   echo "ctrl-v:execute(dot aws s3 view {})"
   printf "ctrl-e:execute(dot aws s3 edit {})"
}

fzf::call() {
   fzf-tmux \
      --ansi \
      --cycle \
      --reverse \
      --inline-info \
      --header "$DOT_FM_PWD" \
      --preview "dot aws s3 preview {}" \
      --bind "$(fzf::bindings | tr '\n' ',')"
}


# ===============
# action
# ===============

action::browse() {
   local readonly selection="$(s3::ls | fzf::call)"
   local readonly name="$(echo "$selection" | str::last_word)"
   
   if [[ -n "$name" ]]; then
      s3::open "$name"
   fi
}

action::edit() {
   local readonly path="$(echo "$line" | str::last_word)"

   local readonly extension="${path##*.}"
   local readonly tmpfile=$(mktemp --suffix ".${extension:-txt}")
   local readonly remote_path="s3://$(s3::path "$path")"

   aws s3 cp --quiet "$remote_path" "$tmpfile"
   "$EDITOR" "$tmpfile"
   aws s3 cp "$tmpfile" "$remote_path"
}

action::view() {
   local readonly path="$(echo "$line" | str::last_word)"

   if s3::is_dir "$path"; then
      s3::ls_hiding_previous "$path"
   else
      aws s3 cp --quiet "s3://$(s3::path "$path")" - \
         | dot shell less --filename "$path" 
   fi
}

# ===============
# main
# ===============

export DOT_FM_PWD="${DOT_FM_PWD:-$(str::without_prefix "${1:-}")}"

if $view; then
   action::view < /dev/tty > /dev/tty
elif $preview; then
   action::view
elif $edit; then
   action::edit < /dev/tty > /dev/tty
elif $preview; then
   action::preview
else
   action::browse
fi
