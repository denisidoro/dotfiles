#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"
source "${DOTFILES}/scripts/core/nav.sh"

##? JSON navigator
##?
##? Usage:
##?    nav [<path>]

docs::eval_help "$@"

# in order to bypass nav.sh and take the trailing slash
# under consideration for path::is_navigable
str::remove_trailing_slash() {
   cat
}

str::really_remove_trailing_slash() {
   sed 's:/*$::'
}

s3::path() {
   local readonly path="$1"
   printf "s3:/"
   echo "$1/" | str::remove_double_slashes
}

path::all() {
   echo "TODO"
}

path::is_navigable() {
   local readonly path="$1"
   if path::is_root "$CWD"; then
      return 0
   fi
   str::ends_with_slash "$path"
}

nav::ls() {
   local readonly path="${1:-$CWD}"
   aws s3 ls "$(s3::path "$path")" \
      | awk '{print $NF}'
}

action::view() {
   local readonly path="$1"

   if path::is_navigable "$path"; then
      nav::ls "$path" \
         | less -R
   else
      aws s3 cp "$(s3::path "$path" | str::really_remove_trailing_slash)" - \
         | dot shell less --filename "$path" \
         | less -R
   fi
}

fzf::extra_bindings() {
   echo "ctrl-e:execute($0 --action edit --cwd $CWD --path {})"
 }

action::edit() {
   local readonly path="$1"

   local readonly extension="${path##*.}"
   local readonly tmpfile=$(mktemp --suffix ".${extension:-txt}")
   local readonly remote_path="$(s3::path "$path" | str::really_remove_trailing_slash)"

   aws s3 cp --quiet "$remote_path" "$tmpfile"
   "$EDITOR" "$tmpfile"
   aws s3 cp "$tmpfile" "$remote_path"
}

action::handle_extra() {
   case $action in
      edit) action::edit "$(path::resolve "$path")" < /dev/tty > /dev/tty ;;
      *) action::abort "$@" ;;
   esac
}

# ===============
# main
# ===============

input::parse "$@"
nav::cd "$CWD"
action::handle "$@"
