#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"
source "${DOTFILES}/scripts/core/feedback.sh"

##? Changes the file creation time
##?
##? Usage:
##?    date add <filepath> <days>
##?    date add <filepath> <days> <hours> [<minutes>]
##?
##? Examples:
##?    date add photo.jpg 365 20 10
##?    ls | xargs -I% date add % 365

doc::parse "$@"

hours=${hours:-0}
minutes=${minutes:-0}

epoch_to_date() {
   printf '%(%F %T)T\n' "$1"
}

only_digits() {
   sed 's/[^0-9]*//g'
}

epoch_to_touchdate() {
   local -r epoch=$1
   local -r date=$(epoch_to_date "$epoch")
   printf '%s' "${date::-2}" | only_digits
   printf '.'
   echo "${date: -2}"
}

epoch_to_filedate() {
   local -r epoch=$1
   local -r date=$(epoch_to_date "$epoch")
   printf '%s' "${date::-8}"
   printf '_'
   echo "${date: -8}"
}

get_new_filepath() {
   local -r filepath="$1"
   local -r target_time=$2

   local -r extension="${filepath##*.}"

   printf '%s' "$(cd "$(dirname "$filepath")" && pwd)/"
   printf '%s' "$(epoch_to_filedate "$target_time").${extension}" | sed 's/[^0-9_]*//g'
   printf '.'
   echo "$extension"
}

get_creation_time() {
   stat -f '%m' "$1"
}

get_target_time() {
   local -r current_time="$1"

   local -r minutes_to_add=$(echo "$days * 24 * 60 + $hours * 60 + $minutes" | bc)
   local -r seconds_to_add=$((minutes_to_add * 60))

   echo $((current_time + seconds_to_add))
}

prompt_text() {
   local -r filepath="$1"

   local -r filename="$(basename "$filepath")"

   local -r green="$(log::ansi green)"
   local -r yellow="$(log::ansi yellow)"
   local -r reset="$(log::ansi reset)"

   echo "${green}[${filename}]${reset} from ${yellow}$(epoch_to_date "$current_time")${reset} to ${yellow}$(epoch_to_date "$target_time")${reset}?"
}

should_rename() {
   [[ $1 == 20* ]]
}

current_time=$(get_creation_time "$filepath")
target_time=$(get_target_time "$current_time")
touchdate="$(epoch_to_touchdate "$target_time")"

if feedback::confirmation "$(prompt_text "$filepath")"; then
   touch -a -m -t "$touchdate" "$filepath"
   if should_rename "$filepath"; then
      mv "$filepath" "$(get_new_filepath "$filepath" "$target_time")"
   fi
fi
