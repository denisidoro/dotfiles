#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/documentation.sh"

##? Jump to files, folders or editing
##?
##? Usage:
##?    jump (global|local|work|file|dev) <args>...
##?    jump (up|root) <args>...
##?    jump edit (global|local) <editor> <args>...

docs::eval_help "$@"

_fzf() {
   fzf --exact --no-sort +m "$@"
}

_fre_suggestions() {
   fre --sorted "${@:-}"
}

files_for_folders() {
   for folder in $(cat); do
      find "$folder" -maxdepth 1 -type f \
         | xargs -I% echo "$folder/%"
   done
}

best_match() {
   local lines="$1"
   shift

   echo "$lines" \
      | _fzf --filter="$*" \
      | head -n1
}

list_files() {
   ag --hidden --ignore .git -g "${1:-}"
}

list_folders() {
   list_files \
      | xargs -n1 dirname \
      | sort -u
}

cd_file() {
   local -r filepath="$1"

   cd "$(dirname "$filepath")"
}

_jump() {
   local cmd="$1"
   local lines="$2"
   shift 2

   if [ $# -gt 0 ]; then
      "$cmd" "$(best_match "$lines" "$@")"
   else
      local -r selection="$(echo "$lines" | _fzf)"
      if [ -n "$selection" ]; then
         "$cmd" "$selection"
      fi
   fi
}

jump_to_global_folder() {
   _jump cd "$(_fre_suggestions)" "$@"
}

jump_to_folder() {
   _jump cd "$(list_folders)"
}

jump_to_folder_for_file() {
   _jump cd_file "$(list_files)"
}

edit_global_file() {
   local -r editor="$1"
   shift

   local -r files="$(_fre_suggestions "$@" | files_for_folders)"
   _jump "$editor" "$files"
}

edit_file() {
   local -r editor="$1"
   shift

   _jump "$editor" "$(list_files)" "$@"
}

jump_to_specific_folder() {
   local -r folder="$1"
   shift

   cd "$folder"
   FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:-} --exact --preview 'cd {} && lsd . --color always'" _jump cd "$(ls)" "$@"
}

jump_to_work_folder() {
   cd "$DEV_HOME"
   local -r projects="$(rg --files -g main.go | grep -v 'test' | sed 's|/main.go||')"
   FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS:-} --exact --preview 'proj={}; readme=\$proj/README.md; [ -f \$readme ] && dot shell less \$readme || cd \$proj && lsd . --color always'" _jump cd "$projects" "$@"
}

# Go up X directories (default: 1)
cd_up() {
   if [[ "$#" -ne 1 ]]; then
      cd ..
   else
      local d=""
      limit=$1
      for ((i=1 ; i <= limit ; i++)); do
         d="$d/.."
      done
      d="$(echo "$d" | sed 's/^\///')"
      cd "$d"
   fi
}

# Go up to project root
cd_to_git_root() {
   cd "$(git rev-parse --show-toplevel)"
}

cmd="$1"
shift

case "$cmd" in
   "local") jump_to_folder "$@" >/dev/null && pwd ;;
   "work") jump_to_work_folder "$@" >/dev/null && pwd ;;
   "dev") jump_to_specific_folder "$DEV_HOME" "$@" >/dev/null && pwd ;;
   "file") jump_to_folder_for_file "$@" >/dev/null && pwd ;;
   "up") cd_up "$@" >/dev/null && pwd ;;
   "root") cd_to_git_root "$@" >/dev/null && pwd ;;
   "edit")
      scope="$1"
      editor="${2:-$EDITOR}"
      shift 2 || shift 1
      case "$scope" in
         "local") edit_file "$editor" "$@" ;;
         *) edit_global_file "$editor" "$@" ;;
      esac
      ;;
   *) jump_to_global_folder "$@" >/dev/null && pwd ;;
esac
