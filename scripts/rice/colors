#!/usr/bin/env bash
set -eo pipefail

source "${DOTFILES}/scripts/core/main.sh"
source "${DOTFILES}/scripts/environment/core.sh"

##? Colors
 #? 0.2.0
##?
##? terminal
##?   This file echoes a bunch of color codes to the 
##?   terminal to demonstrate what's available.  Each 
##?   line is the color code of one foreground color,
##?   out of 17 (default + 16 escapes), followed by a 
##?   test use of that color on all nine background 
##?   colors (default + 8 escapes).
##?
##? palette
##?   Extracts dominant colors from image
##?
##? Usage:
##?    colors terminal
##?    colors print -- <rgb>...
##?    colors [options] palette [--preview] <filename>
##?
##? Options:
##?    -n --number <num>   Number of dominant colors [default: 5]

docs::eval "$@"

row="███████"

_dominant_colors() {
  local readonly filename="$1"
  convert "$filename" +dither -colors "${number}" -unique-colors txt: \
    | grep -Eo '#[0-9A-F]{6}' \
    | tr '\n' ' ' \
    | xargs
}

_as_printf_color() {
  local readonly color="$1"
  local c
  [ ${color:0:1} == "#" ] && c=${color:1} || c="$color"
  echo "$c" \
    | str::uppercase \
    | sed -E 's/([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})/\1\n\2\n\3/' \
    | xargs -I% sh -c "echo 'ibase=16; %' | bc" \
    | tr '\n' ';'
}

_print_colors() {
  local i color c
  for i in 1 2 3; do 
    for color in $@; do
      c="$(_as_printf_color "$color")"
      printf "\x1b[38;2;${c}m${row}\x1b[0m "
    done
    echo 
  done
}

if $print; then

    _print_colors "${rgb[@]}"

elif $palette; then

    colors="$(_dominant_colors "$filename")"
    if $preview; then
      _print_colors "$colors"
    else
      echo "$colors"
    fi

elif $terminal; then

  T='gYw'

  echo -e "\n                 40m     41m     42m     43m\
       44m     45m     46m     47m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
             '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
             '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
  done
  echo

fi