#!/usr/bin/env bash
# vim: filetype=sh
set -u

source "${DOTFILES}/scripts/core/main.sh"
source "${DOTFILES}/scripts/package/aux/add.sh"
source "${DOTFILES}/scripts/package/aux/recipes.sh"

##? Install dependencies, abstracting away package managers
##? and custom recipes
##?
##? Usage:
##?    add [options] <deps>...
##?
##? Options:
##?    -a --ask                Ask for confirmation
##?    -p --package-manager    Force package-manager, skipping any custom recipe

docs::eval_help "$@"

_cleanup() {
   rm -rf "$TMP_DIR" || true
}

trap _cleanup SIGINT

# parse args
deps_arr=()
force_package_manager=false
ask=false
for arg in $@; do
   case $arg in
      -p|--package-manager) force_package_manager=true ;;
      -a|--ask) ask=true ;;
      -*) log::error "Invalid option: $arg"; exit 1 ;;
      *) deps_arr+=("$arg") ;;
   esac
done
deps_str="${deps_arr[@]:-}"

errors=0

# temp setup
mkdir -p "$TMP_DIR" 2> /dev/null || true

# dependency list
deps="$(echo "$deps_str" | str::multiline)"
recipes_as_regex="$(recipe::list | xargs | str::regex)"

# get deps that will use the system's package manager
if $force_package_manager; then
   deps_without_recipe="$(echo "$deps" | str::join)"
else
   deps_without_recipe="$(filter::without_recipe "$deps_str" "$recipes_as_regex" | str::join)"
fi

# use the system's package manager
if [[ -n "$deps_without_recipe" ]]; then

   # get main package manager
   package_manager="$(platform::main_package_manager)"

   args=()

   # args build: sudo or not
   case $package_manager in
      brew) ;;
      *) args+=("sudo") ;;
   esac

   # args build: package manager
   args+=("$package_manager")

   # args build: install command
   case $package_manager in
      apk) args+=("add") ;;
      *) args+=("install") ;;
   esac

   # args build: ask or not
   if ! $ask; then
      case $package_manager in
         brew) ;;
         *) args+=("-y") ;;
      esac
   fi

   # call
   for dep in ${deps_without_recipe[@]:-}; do
      echo
      log::note "Installing $dep using ${package_manager}..."
      "${args[@]}" "$dep" || errors=$((errors + 1))
   done
fi

# use custom recipes, if allowed
if ! $force_package_manager; then
   deps_with_recipe="$(filter::with_recipe "$deps" "$recipes_as_regex" | str::join)"
   for dep in $deps_with_recipe; do
      echo
      log::note "Installing ${dep} using custom recipe..."
      recipe::install "$dep"
   done
fi

exit $errors
