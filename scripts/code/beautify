#!/usr/bin/env bash
 set -uo pipefail

source "${DOTFILES}/scripts/core/main.sh"
source "${DOTFILES}/scripts/core/log.sh"

##? Source code indentation fixer
##?
##? Usage:
##?    beautify <filename>

doc::parse "$@"

_get_language() {
   local -r filename="$1"
   local extension="${filename##*.}"
   local language

   if echo "$extension" | grep -q '/'; then
      extension=""
   fi

   case "$extension" in
      clj*) language="clj" ;;
      py) language="python" ;;
      json) language="json" ;;
      js*) language="javascript" ;;
      rs) language="rust" ;;
      go) language="go" ;;
      sh|bash|zsh|tmuxrc) language="sh" ;;
   esac

   if [ -z "${language:-}" ]; then
      case "$filename" in
         *shrc|*sh_profile|*shenv|*shlogin|*zlogin|*zimrc|*tmux.conf) language="sh" ;;
      esac
   fi

   if [ -z "${language:-}" ] && [ -z "$extension" ]; then
      if cat "$filename" | head -n3 | grep -Eq "sh *$|compdef"; then
         language="sh"
      fi
   fi

   echo "${language:-"unknown"}"
}

language=${language:-$(_get_language "$filename")}
log::warning "formatting $filename as <${language}>"

case "$language" in
   sh_old)
      shfmt -w -i 3 -ci -bn "$filename"
      ;;
   sh)
      beautysh -i 3 -s paronly "$filename"
      sed -i -e 's/() ::/::/g' "$filename"
      # shellcheck -f diff "$filename" | git apply
      # shellcheck "$filename"
      ;;
   json)
      cat "$filename" | jq . > "$filename"
      ;;
   javascript)
      js-beautify "$filename" > /dev/null
      ;;
   rust)
      rustfmt "$filename"
      ;;
   go)
      gofmt "$filename"
      ;;
   *)
      nvim --headless --noplugin -n -u NONE -c ':normal gg=G' +wq "$filename"
      ;;
esac
