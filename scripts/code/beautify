#!/usr/bin/env bash
# vim: filetype=sh
set -uo pipefail

source "${DOTFILES}/scripts/core/main.sh"

##? Source code indentation fixer
##?
##? Usage:
##?    beautify <filename>

docs::eval "$@"

language=fallback

_all_dotfiles_files_to_format() {
   find "${DOTFILES}/scripts" -maxdepth 3 -executable -type f
   find "${DOTFILES}/" -maxdepth 4 -iname "*.sh" -type f
   find "${DOTFILES}/" -maxdepth 4 -iname "*.zsh" -type f
   find "${DOTFILES}/" -maxdepth 4 -iname "*.bash" -type f
   find "${DOTFILES}/bin" -maxdepth 2 -executable -type f
   find "${DOTFILES}/scripts/core" -maxdepth 2 -type f
   find "${DOTFILES}/shell" -maxdepth 3 -type f
}

_dedupe() {
   sort -u
}

_filter() {
   grep -v '.py\|beautify\|docopts\|node_modules\|modules\|clojure/compile\|info/bar\|vscode\|hushlogin\|DS_S\|bin/dot'
}

if [[ $filename = "self" ]]; then
   _all_dotfiles_files_to_format \
      | _dedupe \
      | _filter \
      | xargs -I% dot code beautify %
   exit 0
fi

extension="${filename##*.}"
if echo "$extension" | grep -q '/'; then
   extension=""
fi

case "$extension" in
   *sh) language=sh ;;
   *clj*) language="clj" ;;
   *py) language="python" ;;
   json) language="json" ;;
esac

if [ -z $extension ]; then
   if cat "$filename" | head -n3 | grep -q "sh$"; then
      language=sh
   fi
fi

log::warning "formatting $filename as <${language}>"
case "$language" in
   sh_old)
      shfmt -w -i 3 -ci -bn "$filename"
      ;;
   sh)
      beautysh -i 3 -s paronly -f "$filename"
      sed -i -e 's/() ::/::/g' "$filename"
      ;;
   json)
      echo "$(cat "$filename" | jq .)" > "$filename"
      ;;
   *)
      nvim --headless --noplugin -n -u NONE -c ':normal gg=G' +wq "$filename"
      ;;
esac
