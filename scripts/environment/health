#!/usr/bin/env bash
# vim: filetype=sh
set -euo pipefail

source "${DOTFILES}/scripts/core/main.sh"

##? Checks for available commands, config files, etc.
#?? 0.5.0
##?
##? Usage:
##?    health

docs::eval "$@"

CODE=0

function main() {

   echo
   log::header "Shell"
   check_commands "ruby python git zsh tmux fasd ag tmuxinator fzf curl"
   check_dir "$HOME/.tmux/plugins/tpm" "tpm"

   if platform::is_osx; then
      echo
      log::header "GNU commands"
      check_gnu_commands "sed grep" true
   fi

   echo
   log::header "Editors"
   check_commands "vim nvim emacs"
   check_file "$HOME/.local/share/nvim/site/autoload/plug.vim" "vim-plug"

   echo
   log::header "Submodules"
   check_file "$DOTFILES/modules/dotbot/.git" "dotbot"
   check_file "$DOTFILES/modules/zplug/.git" "zplug"

   echo
   log::header "Local git"
   check_file "$DOTFILES/local/gitconfig" "config"

   echo
   log::header "Misc"
   check_commands "unzip ranger tig ag bat htop clojure lein node"

   echo
   log::header "dotfiles"
   check_env "DOTFILES"
   check_commands "dot"

}

function check_command_available() {
   local cmd="$1"
   if platform::command_exists "$cmd"; then
      log::success "$cmd"
   else
      inc_error "$cmd"
   fi
}

function check_gnu_command_available() {
   local cmd
   if platform::is_osx; then
      cmd="g$1"
   else
      cmd="$1"
   fi
   check_command_available "$cmd"
}

function check_commands() {
   local cmds="$1"
   for cmd in $cmds; do
      check_command_available "$cmd"
   done
}

function check_gnu_commands() {
   local cmds="$1"
   for cmd in $cmds; do
      check_gnu_command_available "$cmd"
   done
}

function check_vim_plug() {
   if fs::is_file $HOME/.local/share/nvim/site/autoload/plug.vim; then
      log::success "vim-plug"
   else
      inc_error "vim-plug"
   fi
}

function check_file() {
   local path="$1"
   local name="$2"
   if fs::is_file "$path"; then
      log::success "$name"
   else
      inc_error "$name"
   fi
}

function check_dir() {
   local path="$1"
   local name="$2"
   if fs::is_dir "$path"; then
      log::success "$name"
   else
      inc_error "$name"
   fi
}

function check_env() {
   set +u
   [[ -z "${!1}" ]] && {
      inc_error "\$$1"
   } || log::success "\$$1"
   set -u
}

function inc_error() {
   log::error "$1"
   CODE=$(($CODE + 1))
}

main "$@"
exit $CODE
