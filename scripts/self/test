#!/usr/bin/env bash
set -euo pipefail

source "${DOTFILES}/scripts/core/test.sh"

##? Run tests
##?
##? Usage:
##?    test
##?    test suite <suite>
##?    test file <file>

doc::maybe_help "$@"

_prepare_zsh() {
   if has zsh; then
      return 0
   fi
   local -r bash_path="$(which bash)"
   local -r zsh_path="${bash_path//bash/zsh}"
   sudo ln -s "$bash_path" "$zsh_path" || sudo ln -s "$bash_path" "$zsh_path"
}

_prepare_dotlink() {
   local file="${DOTFILES}/modules/dotlink/dotlink"
   if [[ -f "$file" ]]; then
      return 0
   fi
   mkdir -p "$(dirname "$file")" || true
   local -r content="$(cat "$0"; echo; echo; echo "dotlink_main() { echo stub; }")"
   echo "$content" > "$file"
}

_create_file() {
   local -r content="$1"
   local -r filename="$2"
   mkdir -p "$(dirname "$filename")" || true
   echo "$content" > "$filename"
   chmod +x "$filename"
}

_create_content() {
   cat <<EOF
#!/usr/bin/env bash

echo "Stub

Usage:
    $1
    $1 --version
    $1 --help"

exit 0
EOF
}

_stub_vscode() {
   if has code; then
      return 0
   fi
   local -r path="${DOTFILES}/local/bin/code"
   [ -f "$path" ] && return 0
   local -r content="$(_create_content "code")"
   _create_file "$content" "$path"
}

_cargo() {
   cd "${DOTFILES}/rust"
   cargo build
}

cmd="${1:-}"

file=""
suite=""
case $cmd in
   file) file="$2"; export TEST_FILTER="$2" ;;
   suite) suite="$2"; export TEST_FILTER="^${2} \-"  ;;
   *) ;;
esac

TEST_DIR="${DOTFILES}/target/test"

mkdir -p "$TEST_DIR" 2>/dev/null || true
_prepare_zsh 2>/dev/null || true
_prepare_dotlink 2>/dev/null || true
_stub_vscode 2>/dev/null || true

export PATH="${DOTFILES}/local/bin:${PATH}"
hash -r 2>/dev/null || true

if [[ "${suite:-}" == "rust" ]]; then
   _cargo || true
fi

test::start

rm -rf "$TEST_DIR" || true