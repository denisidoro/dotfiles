#!/usr/bin/env bash
# shellcheck disable=SC2046,SC2015,SC1090,SC1091,SC2034,SC2012,SC2207,SC1090,SC201,SC2059,SC2155,SC2013

source "${DOTFILES}/scripts/git/aux/core.sh"
source "${DOTFILES}/scripts/core/str.sh"

##? Changelog generator
##?
##? Usage:
##?    log release (github|local)
##?    log commit

doc::parse "$@"

main() {
   IFS=$'\n'
   if $local; then
      git::changelog_release_local "$@"
   elif $github; then
      git::changelog_release_github "$@"
   elif $commit; then
      git::changelog_commit "$@"
   fi
}

github::lines() {
   local -r e2="$(printf $ESCAPE_CHAR_2)"
   local -r e3="$(printf $ESCAPE_CHAR_3)"

   grep '<code>' -A3 \
      | sed "s/^--/${e2}/g" \
      | tr '\n' "$ESCAPE_CHAR_3" \
      | tr "$ESCAPE_CHAR_2" '\n' \
      | grep 'commit/' \
      | grep 'title=' \
      | sed -E 's|.*title="([^"]+)".*commit/([a-f0-9]+).*|\2;\1|g' \
      | sed -E 's/ \(#([0-9]+)\).*/;\1/' \
      | sed -E "s/${e3}.*//g"
}

github::process_line() {
   local -r line="$1"
   local commit="$(echo "$line" | cut -d';' -f1)"
   commit="${commit:0:5}"
   local -r name="$(echo "$line" | cut -d';' -f2)"
   local -r pr="$(echo "$line" | cut -d';' -f3)"

   local extra=""
   if [ -n "$pr" ]; then
      extra=" ([#${pr}](${REPO_URL}/issues/${pr}))"
   fi

   echo "- [\`${commit}\`](${REPO_URL}/commit/${commit}) ${name}${extra}"
}

github::changelog() {
   local tag_older="$1"
   local tag_newer="$2"
   curl -s "${REPO_URL}/compare/${tag_older}...${tag_newer}"
}

git::changelog_release_github() {
   echo "### :sparkles: New features
### :bug: Fixes
### :computer: Code quality
### :information_source: Context
### :bangbang: Breaking changes"
   echo
   echo

   REPO_URL="$(_repo_url)"

   pairs=($(_all_tags))
   len="${#pairs[@]}"

   for i in $(seq 0 $((len - 2))); do
      tag_older="${pairs[$((len - i - 2))]}"
      tag_newer="${pairs[$((len - i - 1))]}"
      echo "[${tag_newer}]"
      for l in $(github::changelog "$tag_older" "$tag_newer" | github::lines); do
         github::process_line "$l"
      done
      echo
      echo
   done
}

git::changelog_commit() {
   cd "$(git::root)" || exit

   local -r changes="$(git diff --numstat HEAD \
      | awk '{print $3" "$1-$2}' \
      | sort -k2 -n -r \
      | awk '{print $1}' \
      | sed -E 's|(.*)/(.*)|\2|g')"

   local -r n="$(printf "$changes" \
      | wc -l \
      | xargs)"

   local msg="$(printf "$changes" \
      | head -n3 \
      | tr '\n' ';' \
      | sed -E 's/ *; */, /g' \
      | sed -E 's/ *, *$//g')"

   [[ $n -gt 3 ]] && msg="${msg}, ..."

   echo "$(date +'%b-%d %Hh%M'): ${msg}"
}

git::changelog_release_local() {
   REPO_URL="$(_repo_url)"

   pairs=($(_all_tags))
   len="${#pairs[@]}"

   for i in $(seq 0 $((len - 2))); do
      tag_older="${pairs[$((len - i - 2))]}"
      tag_newer="${pairs[$((len - i - 1))]}"
      _commits "$tag_older" "$tag_newer"
      echo
      echo
   done
}

_repo_url() {
   cat "$(git::root)/.git/config" \
      | grep origin -A1 \
      | grep url \
      | awk '{print $NF}' \
      | head -n1 \
      | tr ':' '/' \
      | sed 's|git@|https://|g' \
      |  sed -E 's/.git$//'
}

_remove_empty_lines() {
   sed -E '/^\s*$/d'
}

_capture() {
   perl -pe 's/([a-z\d]+)\s+(.*)/\1;\2/s'
}

_format() {
   for line in $(cat); do
      local commit="$(echo "$line" | cut -d';' -f1 | xargs | cut -c1-5)"
      local msg="$(echo "$line" | cut -d';' -f2 | sed -E "s|\(#([0-9]+)\)|([#\1](${REPO_URL}/issues/\1))|g")"
      echo "- [\`${commit}\`](${REPO_URL}/commit/${commit}) ${msg}"
   done
}

_dedupe() {
   awk '!visited[$0]++'
}

_cleanup() {
   grep -v 'Author:' \
      | grep -v 'Date:' \
      | grep -v 'Merge pull request' \
      | grep -v 'Merge:' \
      | _remove_empty_lines \
      | grep '^commit ' -A1 \
      | sed -E 's/commit\s+([a-f0-9]+)/\1/g' \
      | sed 'N;s/\n/ /' \
      | perl -pe 's/^--\s([a-f0-9]+)\s+/\1/g' \
      | grep -v '^--' \
      | grep -v '\-\-$' \
      | _capture \
      | _dedupe \
      | _format
}

_commits() {
   local -r tag_older="$1"
   local -r tag_newer="$2"

   local -r tag_date="$(git log -1 --format=%ai v2.3.1 | awk '{print $1}')"

   echo "## [${tag_newer}](${REPO_URL}/releases/tag/${tag_newer}) - ${tag_date}"

   git log "${tag_older}..${tag_newer}" --grep '#' \
      | _cleanup
}

_all_tags() {
   git for-each-ref --sort=creatordate --format '%(refname)' refs/tags \
      | sed 's|refs/tags/||g'
}

main "$@"