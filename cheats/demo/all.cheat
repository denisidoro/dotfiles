% grep

# filter lines
grep '<pattern>'

# exclude lines, remove lines
grep -v '<pattern>'


% crontab

# list
crontab -l


% awk

# last line
awk '{print $NF}'

# nth line
awk '{print $<n>}'


% network

# private ip
ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'




% docker

# print logs
docker logs --follow <container_id>

# shell into container
docker exec -i /bin/bash

$ image_id: docker images --- --headers 1 --column 3 --delimiter '\s\s+'
$ container_id: docker ps --- --headers 1 --column 1 --delimiter '\s\s+'


% git common

$ local_branch: dot git ls local_branch --- --column 1
$ config: dot git ls config --- --column 1
$ stash: dot git ls stash --- --column 1
$ commit: dot git ls commit --- --column 1
$ toplevel_dir: dot git ls toplevel_dir
$ file: dot git ls file --- --column 1 --preview-window 'right:50%' --preview 'bat -p --color=always {}'
$ files: dot git ls file --- --multi --column 1 --preview-window 'right:50%' --preview 'bat -p --color=always {}'
$ modified_file: dot git ls file -m --- --column 1 --preview-window 'right:50%' --preview 'bat -p --color=always {}'
$ modified_files: dot git ls file -m --- --multi --column 1 --preview-window 'right:50%' --preview 'bat -p --color=always {}'
$ tag: dot git ls tag --- --column 1
$ upstream_branch: dot git branch upstream
$ modified_files_upstream: git diff --name-only "<upstream_branch>" --- --multi --preview 'bat -p --color=always {}' --map "sed -e 's/^.*$/\"&\"/' | tr '\n' ' '"

% git branch
@ git common

# checkout branch :: gb
git checkout "<local_branch>"

% git config
@ git common

# print config value
git config "<config>"

% git view
@ git common

# view
bat --color=always "<file>"

% git add
@ git common

# add files
cd "<toplevel_dir>"
files=($(echo "<modified_files>"))
git add "${files[@]}"
git status

% git misc
@ git common

# revert (checkout) files to upstream version
for f in <modified_files_upstream>; do git checkout "<upstream_branch>" "$f"; done